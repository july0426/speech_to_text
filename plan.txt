1.音频分析完成
2.代码逻辑整理完成
3.开发计划编写中
4.脚本代码完成量30%

Dear All:

    今日工作总结:

        1.音频分析完成,初步识别5秒-4分钟的音频,已和Jane确认.

        2.编写语音识别脚本

            (1)本地建立相关的数据表
            (2)设计大体的业务流程
            (3)编写脚本的整体说明注释

        3.编写开发计划,具体计划如下:
            1.代码整体规划:---周一下班前完成
                代码逻辑,函数,参数传递,整体注释
            2.数据库交互模块:---周一下班前
                1.取识别文件信息
                2.取IBM账号账号信息
            3.音频相关处理模块:---周二上午
                1.获取音频时长
                2.音频转换为16k采样率,格式为mp3
                3.识别完删除临时文件(mp3格式)
            4.异常处理完善:---周二上午
                1.数据库的相关操作
                2.代理的可用性
                3.正则表达式
                4.音频处理相关操作
            5.使用代理模块:---周二下午
                1.请求接口加代理
            6.本地测试调优:---周二下午
                1.脚本运行情况
                2.数据库数据准确性
            7.线上环境搭建:---周三上午
                1.ffmpeg,MySQLdb,IBM-SDK等安装
                2.数据库账号申请
            8.线上脚本测试:---周三上午+下午
                1.脚本测试
                2.定时任务设置
            9.IBM账号注册+入库:---周三下午
                1.预计注册20个,视情况而定,先申请10个也行
Dear All:

    本周工作计划:

        1.对数据库现有音频进行分析,筛选需要识别的音频,和Jane最终确认.   周一
          目标: 1.在前期做充分的分析,减少上线后各种修改,减少账号的注册数量

        2.编写语音识别的脚本,在本地进行调试测试.       周一周二
          目标: 1.对可能出现报错的地方进行异常处理,使用try.
               2.注释完整,逻辑清晰,方便后期维护和交接.

        3.和Jane沟通,注册IBM账号,存入数据库.  需要在线上建表,询问shelly.   周三
          目标: 1.确认账号数量,数据表结构,对每月每账号的使用时长进行统计

        4.线上环境搭建,脚本上线测试.        周四
          目标: 1.脚本测试成功,数据库相关数据更新/写入成功
               2.和shelly确定频率,开启定时任务

        5.对脚本运行情况进行检测,找Jane进行数据验收,根据上线后的问题进行优化     周五
          目标: 1.音频识别后的数据是否正常,有没有乱码或者无法写入的情况.
               2.脚本能否正常运行,有没有异常报错.
               3.账号的使用时长统计是否正常
            2.尝试用python进行2张图片的比对.
                结论:2张一模一样的图片(包括大小)可以认为是一样的,
                    图片内容一样,但是内存不一样就会被认为是不同的图片

            3.总结一下obb下载项目.
                (1).做这个工作的意义是什么
                    1.为公司的网站提供数据支持
                    2.为用户提供可靠的,最新的,版本最丰富的软件安装包
                (2).为什么要使用python
                    1.脚本运行不受时间限制,按照流程都运行完才结束,除非中间有报错(可以人为控制,防止).
                    2.针对需要cookie的网站,python的第三方库有简洁的靠谱的处理方式,减少我们的任务量.
                    3.通过自动化测试的方式,可以模拟许多用户行为,运行js,突破反爬虫限制.
                (3).obb 下载、数据交互及代码处理之间的逻辑关系
                    1.从数据库中取出数据,根据url的特征,分别进行处理
                    2.提供url就可以下载的网站,可以使用wget,
                      有的网站需要cookie,则需要模拟请求,把源码写入新的文件(有风险,网络异常或者数据流异常)
                    3.代码处理要充分考虑各种异常及对应的处理,否则会造成数据异常或者下载下来的安装包不可用,影响用户体验.


阿拉伯语音频识别开发计划:
    1.代码整体规划:---周一下班前完成
        代码逻辑,函数,参数传递,整体注释
    2.数据库交互模块:---周一下班前
        1.取识别文件信息
        2.取IBM账号账号信息
    3.音频相关处理模块:---周二上午
        1.获取音频时长
        2.音频转换为16k采样率,格式为mp3
        3.识别完删除临时文件(mp3格式)
    4.异常处理完善:---周二上午
        1.数据库的相关操作
        2.代理的可用性
        3.正则表达式
        4.音频处理相关操作
    5.使用代理模块:---周二下午
        1.请求接口加代理
    6.本地测试调优:---周二下午
        1.脚本运行情况
        2.数据库数据准确性
    7.线上环境搭建:---周三上午
        1.ffmpeg,MySQLdb,IBM-SDK等安装
        2.数据库账号申请
    8.线上脚本测试:---周三上午+下午
        1.脚本测试
        2.定时任务设置
    9.IBM账号注册+入库:---周三下午
        1.预计注册20个,视情况而定,先申请10个也行

需求:
    对音频进行识别,将识别后的text文本存入数据库
数据量:
    现有2w条,日增量:500条
第三方接口:
    1.IBM的speech_to_text接口
    2.每月每账号免费1000分钟,预计需要20个账号
数据库:
    1.音频文件数据表show_caller_audio:
        新增字段:speech_status
            初始值为0,开始识别1,识别成功为时间戳,识别失败-10,音频过长10000,音频过短为10
        新增字段speech_text:
            存储识别后的文本
    2.新建一个IBM账号表show_caller_IBM_account:
        1.id
        2.username
        3.password
        4.duration  初始值为0,最大值60000,每月1号重置为0
        5.status    初始值为0,duration超过60000时,修改为10,每月1号重置为0
